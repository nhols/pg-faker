name: CI

on:
  push:
    branches:
      - master
    tags:
      - '**'
  pull_request: {}

jobs:
  quality-checks:
    name: Quality checks
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        enable-cache: true
    - name: Install the project
      run: uv sync --all-extras --dev
    - name: Run ruff linting
      run: uv run ruff check src/
    - name: Run ruff formatting check
      run: uv run ruff format --check src/
    - name: Run pyright type checking
      run: uv run pyright src/

  test:
    name: Test suite
    uses: ./.github/workflows/test-reusable.yml
    with:
      python-versions: '["3.12", "3.13"]'
      postgres-versions: '["17"]'

  version-check:
    name: Version consistency check
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Check tag matches pyproject.toml version
      run: |
        # Extract version from pyproject.toml
        VERSION=$(grep '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
        # Extract version from git tag (remove 'v' prefix if present)
        TAG_VERSION=${GITHUB_REF_NAME#v}
        
        echo "pyproject.toml version: $VERSION"
        echo "Git tag version: $TAG_VERSION"
        
        if [ "$VERSION" != "$TAG_VERSION" ]; then
          echo "Error: Version mismatch!"
          echo "pyproject.toml version ($VERSION) does not match git tag ($TAG_VERSION)"
          exit 1
        fi
        echo "Version check passed!"

  build:
    name: Build distribution
    runs-on: ubuntu-latest
    needs: [quality-checks, test, version-check]

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.x"
    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        enable-cache: true
    - name: Build package
      run: uv build
    - name: Store the distribution packages
      uses: actions/upload-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

  publish-to-pypi:
    name: Publish Python distribution to PyPI
    if: startsWith(github.ref, 'refs/tags/')  # only publish to PyPI on tag pushes
    needs:
    - build
    runs-on: ubuntu-latest
    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing

    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
    - name: Publish distribution to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1

  github-release:
    name: Sign the Python distribution with Sigstore and upload them to GitHub Release
    needs:
    - publish-to-pypi
    runs-on: ubuntu-latest

    permissions:
      contents: write  # IMPORTANT: mandatory for making GitHub Releases
      id-token: write  # IMPORTANT: mandatory for sigstore

    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
    - name: Sign the dists with Sigstore
      uses: sigstore/gh-action-sigstore-python@v3.0.0
      with:
        inputs: >-
          ./dist/*.tar.gz
          ./dist/*.whl
    - name: Create GitHub Release
      env:
        GITHUB_TOKEN: ${{ github.token }}
      run: >-
        gh release upload
        '${{ github.ref_name }}' dist/**
        --repo '${{ github.repository }}'

  publish-to-testpypi:
    name: Publish Python distribution to TestPyPI
    needs:
    - build
    runs-on: ubuntu-latest

    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing

    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
    - name: Publish distribution to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
